
 generateLevyStatement: async (company_id, fromDate = '', toDate = '', isPreview = false) => {
        var deferred = q.defer();
        var cpf_query = "SELECT * from " + tableConfig.HRM_EMPLOYEE_CPF;
        var cpf_data = await commonFunction.getQueryResults(cpf_query);
        var totalSalaryAmount = 0;

        var totalNumberOfDaysPerMonth = moment(toDate, "YYYY-MM").daysInMonth();
        var month_year = moment(toDate).format('YYYY-MM');

        var month = moment(toDate).format('MM');
        var year = moment(toDate).format('YYYY');
        var monthtomonth = month;
        var yeartoyear = year;
        var alreadygenerated = 0;
        var ifPayrollGenerated = "SELECT count(*) as count FROM " + tableConfig.HRM_PAYROLL_FOR_MONTH + " WHERE company_id = '"+ company_id +"' AND month = '"+ monthtomonth +"' and  year = '"+ yeartoyear +"' and ( status = 1 or status = 2) ";
        var ifGenerated = await commonFunction.getQueryResults(ifPayrollGenerated);
        console.log('generate----------->', ifGenerated[0].count)
        if(ifGenerated[0].count > 0){
            alreadygenerated = 1;
        }
        var checkPayrollGenerated = "SELECT count(*) as count FROM " + tableConfig.HRM_EMPLOYEE_SALARY_DETAILS + " WHERE company_id = '"+ company_id +"' AND month_year = '"+ month_year +"'";
        var isPayrollGenerated = await commonFunction.getQueryResults(checkPayrollGenerated);
        var payrollGenerated = false;

        if(isPayrollGenerated.length > 0) {
            payrollGenerated = (isPayrollGenerated[0].count > 0)? true : false; 
        }

        if (isPreview == false && payrollGenerated == false) {
           var addpayrollForMonthQuery = "INSERT INTO "+ tableConfig.HRM_PAYROLL_FOR_MONTH + " (company_id,month,year,payroll_file_path) VALUES ('"+ company_id +"','"+ month +"','"+ year +"','')";
           var addPayrollResult = await commonFunction.executeQueryAndRetunResults(addpayrollForMonthQuery);
           var payroll_id = 0;

           if(addPayrollResult.insertId != undefined && addPayrollResult.insertId != null) {
            payroll_id = addPayrollResult.insertId;
           }
        }

        var incometax_query = "SELECT * from " + tableConfig.HRM_INCOMETAX;
        var incometax_data = await commonFunction.getQueryResults(incometax_query);

        var leaveTypeQuery = "SELECT * FROM " + tableConfig.HRM_LEAVE_TYPE + " WHERE status = '1'";
        var leaveType = await commonFunction.getQueryResults(leaveTypeQuery);
        var cpg_age_object = {};
      
        var numberOfWorkingDays = await commonFunction.getBusinessDatesCount(fromDate, toDate);
        var holidayQuery = "SELECT from_date,to_date FROM " + tableConfig.HRM_HOLIDAYS + " WHERE company_id = '" + company_id + "' AND ((from_date BETWEEN '" + fromDate + "' AND '" + toDate + "') OR (to_date BETWEEN '" + fromDate + "' AND '" + toDate + "'))";
        var holidayList = await commonFunction.getQueryResults(holidayQuery);

        var approvedLeaveQuery = "SELECT um.id as employ_id,lr.from_date,lr.to_date FROM " + tableConfig.HRM_USER_MASTER + " as um INNER JOIN " + tableConfig.HRM_EMPLOYEE_LEAVE_REQUEST + " as lr ON lr.emp_id = um.id  AND ((lr.from_date BETWEEN '" + fromDate + "' AND '" + toDate + "') or (lr.from_date < '" + fromDate + "' AND lr.to_date > '" + toDate + "')) AND lr.status = '2' WHERE um.company_id = '" + company_id + "'";
        var approvedLeaveList = await commonFunction.getQueryResults(approvedLeaveQuery);

        var approved_leave_object = {};
        if (approvedLeaveList.length > 0) {
            approvedLeaveList.forEach((leave, i) => {
                let fdate = moment(leave.from_date).format('YYYY-MM-DD');
                let edate = moment(leave.to_date).format('YYYY-MM-DD');
                let to_date = moment(toDate).format('YYYY-MM-DD');
                var from_date = moment(fromDate).format('YYYY-MM-DD');
                approvedLeaveList[i].approved_leaves = 0;

                if (edate < to_date) {
                    approvedLeaveList[i].approved_leaves = approvedLeaveList[i].approved_leaves + moment(edate).diff(fdate, 'days') + 1;
                } else {
                    approvedLeaveList[i].approved_leaves = approvedLeaveList[i].approved_leaves + moment(to_date).diff(fdate, 'days') + 1;
                }

                if (approved_leave_object[leave.employ_id] == undefined) {
                    approved_leave_object[leave.employ_id] = 0;
                }
                approved_leave_object[leave.employ_id] = approved_leave_object[leave.employ_id] + approvedLeaveList[i].approved_leaves;
            });
        }

        var numberOfHolidays = 0;

        if (holidayList.length > 0) {
            holidayList.forEach(holiday => {
                var fdate = moment(holiday.from_date).format('YYYY-MM-DD');
                var edate = moment(holiday.to_date).format('YYYY-MM-DD');
                var to_date = moment(toDate).format('YYYY-MM-DD');
                var from_date = moment(fromDate).format('YYYY-MM-DD');

                if (edate < to_date && from_date < fdate) {
                    var count = 0;
                    let holidayStartDate = new Date(fdate);
                    let holidayEndDate = new Date(edate);

                    var curDate = holidayStartDate;
                    while (curDate <= holidayEndDate) {
                        var dayOfWeek = curDate.getDay();
                        if (((dayOfWeek == 6) || (dayOfWeek == 0)))
                            count++;
                        curDate.setDate(curDate.getDate() + 1);
                    }
                    numberOfHolidays = numberOfHolidays + moment(edate).diff(fdate, 'days') + 1;
                    numberOfHolidays = numberOfHolidays - count;
                } else if (fdate < from_date) {

                    var count = 0;
                    let holidayStartDate = new Date(from_date);
                    let holidayEndDate = new Date(edate);

                    var curDate = holidayStartDate;
                    while (curDate <= holidayEndDate) {
                        var dayOfWeek = curDate.getDay();
                        if (((dayOfWeek == 6) || (dayOfWeek == 0)))
                            count++;
                        curDate.setDate(curDate.getDate() + 1);
                    }
                    numberOfHolidays = numberOfHolidays + moment(edate).diff(from_date, 'days') + 1;
                    numberOfHolidays = numberOfHolidays - count;
                } else {
                    var count = 0;
                    let holidayStartDate = new Date(fdate);
                    let holidayEndDate = new Date(to_date);

                    var curDate = holidayStartDate;
                    while (curDate <= holidayEndDate) {
                        var dayOfWeek = curDate.getDay();
                        if (((dayOfWeek == 6) || (dayOfWeek == 0)))
                            count++;
                        curDate.setDate(curDate.getDate() + 1);
                    }

                    numberOfHolidays = numberOfHolidays + moment(to_date).diff(fdate, 'days') + 1;
                    numberOfHolidays = numberOfHolidays - count;
                }
            });
        }

        numberOfWorkingDays = numberOfWorkingDays - numberOfHolidays;
        if (cpf_data.length > 0) {
            cpf_data.forEach(cpf => {
                cpg_age_object[cpf.min_age] = {
                    ordinary_account: cpf.ordinary_account,
                    special_account: cpf.special_account,
                    medisave_account: cpf.medisave_account,
                    employer_contribution: cpf.employer_contribution,
                    employee_contribution: cpf.employee_contribution
                }
            });
        }

        var query = "SELECT com.sector_type,COUNT(att.emp_id) as present_days,IFNULL(SUM(overtime),0) as overtime,um.id,um.emp_id as employee_id,emp.birthday,emp.firstname,emp.middlename,emp.lastname,emp.basic_salary,emp.salary,emp.email,emp.visa_status as visa_status,emp.wp_skill as wp_skill,ea.allowance as allowances,FN_PAYROLL_ACTION(um.id) as action_status from " + tableConfig.HRM_USER_MASTER + " um INNER JOIN " + tableConfig.HRM_EMPLOYEE_DETAILS + " as emp ON emp.emp_id = um.id AND um.status = '1' INNER JOIN " + tableConfig.HRM_COMP_PROFILE + " as com ON com.id = um.company_id  LEFT JOIN " + tableConfig.HRM_EMPLOYEE_ALLOWANCES + " ea ON ea.emp_id = emp.emp_id LEFT JOIN " + tableConfig.HRM_EMPLOYEE_ATTENDENCE + " as att ON att.emp_id = emp.emp_id and att.check_in BETWEEN '" + fromDate + "'  AND '" + toDate + "' where um.company_id = '" + company_id + "' and (emp.visa_status=3 || emp.visa_status=4) GROUP BY emp.emp_id";

        sql.query(query, async function (err, result) {
            if (err) {
                console.log(err);
                deferred.resolve({ status: 0, message: "Failed to get employee details" });
            }
            else {

                if (result.length > 0) {
                    var amount_to_calculate_cpf = 0;
                    var cpfInsertQuery = "INSERT INTO " + tableConfig.HRM_EMPLOYEE_SALARY_DETAILS + " (company_id,emp_id,ordinary_account,special_account,medisave_account,employer_contribution,employee_contribution,month_year,income_tax,net_salary,gross_salary,lop,overtime_allowance,lop_days,payroll_id,basic_salary,salary,bonus,hra,transport_allowance,food_allowance,phone_allowance) VALUES ";

                    result.forEach((data, index) => {
                        
                        var income_tax_amount = 0;
                        var totalAllowanceAmount = 0;
                        result[index].total_allowance = 0;

                        data.bonus = 0;
                        result[index].hra = 0;
                        result[index].transport_allowance = 0;
                        result[index].food_allowance = 0;
                        result[index].phone_allowance = 0;
                        if(data.visa_status==3)
                        {
                            result[index].visa_status='S Pass';
                        }
                        if(data.visa_status==4)
                        {
                            result[index].visa_status='Work Permit';
                        }

                        if(data.sector_type==1)
                        {
                            result[index].sector_type='Service';
                        }
                        if(data.sector_type==2)
                        {
                            result[index].sector_type='Manufacturing';
                        }
                        if(data.sector_type==3)
                        {
                            result[index].sector_type='Construction';
                        }
                        if(data.sector_type==4)
                        {
                            result[index].sector_type='Process';
                        }
                        if(data.sector_type==5)
                        {
                            result[index].sector_type='Marine Shipyard';
                        }

                        if(data.wp_skill==1)
                        {
                            result[index].wp_skill='Basic Skilled';
                        }
                        else if(data.wp_skill==2)
                        {
                            result[index].wp_skill='Higher Skilled';
                        }
                        else
                        {
                            result[index].wp_skill='-';
                        }
                        var levy_amount=0;
                        result[index].levy_amount=levy_amount;

                        try {
                            if (data.allowances && data.allowances.length > 0) {
                                data.allowances = phpunserialize(data.allowances);
                                Object.keys(data.allowances).forEach(function (key) {
                                    var val = data.allowances[key];
                                    if (key == 'bonus') {
                                        data.bonus = parseInt(val);
                                    } else {
                                        totalAllowanceAmount = parseInt(totalAllowanceAmount) + parseInt(val);
                                        if(key == '1') {
                                            result[index].hra = parseInt(val);
                                        } else if (key == '2') {
                        
                                            result[index].transport_allowance = parseInt(val);
                                        } else if(key == '3') {
                                            result[index].food_allowance = parseInt(val);
                                        } else if(key == '4'){
                                            result[index].phone_allowance = parseInt(val);
                                        }
                                    } 
                                    result[index].total_allowance = parseInt(totalAllowanceAmount) + parseInt(result[index].bonus)
                                });
                                delete data.allowances;
                            }
                           
                        } catch (ex) {
                            console.log('Parsing allowance object error...', ex);
                        }
                        console.log('totalallow',totalAllowanceAmount)

                        var dob = (data.birthday) ? data.birthday : '';
                        var emp_primary_ID = (data.id) ? data.id : 0;
                        var present_days = data.present_days;
                        var approved_leaves = approved_leave_object[emp_primary_ID] ? approved_leave_object[emp_primary_ID] : 0;
                        present_days = present_days + approved_leaves;

                        var lopDaysForEmployee = numberOfWorkingDays - present_days;
                        if (lopDaysForEmployee < 0) {
                            lopDaysForEmployee = 0;
                        }

                        var age = 0;
                        var ordinary_amount = 0;
                        var special_amount = 0;
                        var medisave_amount = 0;
                        var employer_contribution_amount = 0;
                        var employee_contribution_amount = 0;
                        var ordinary_acccount_percent = 0;
                        var special_account_percent = 0;
                        var medisave_account_percent = 0;
                        var employer_contribution_percent = 0;
                        var employee_contribution_percent = 0;
                        amount_to_calculate_cpf = data.basic_salary + data.bonus;

                        if (dob != '') {
                            age = moment().diff(dob, 'years', false);
                        }

                        age = parseInt(age);
                        var minAge = 0;

                        if (cpf_data.length > 0) {
                            var age_identified = false;
                            cpf_data.forEach(cpf => {
                                if (age <= cpf.min_age && age_identified == false) {
                                    minAge = cpf.min_age;
                                    ordinary_acccount_percent = cpg_age_object[minAge]['ordinary_account'];
                                    special_account_percent = cpg_age_object[minAge]['special_account'];
                                    medisave_account_percent = cpg_age_object[minAge]['medisave_account'];
                                    employer_contribution_percent = cpg_age_object[minAge]['employer_contribution'];
                                    employee_contribution_percent = cpg_age_object[minAge]['employee_contribution'];
                                    age_identified = true;
                                }
                            });
                        }

                        ordinary_amount = (amount_to_calculate_cpf * ordinary_acccount_percent) / 100;
                        special_amount = (amount_to_calculate_cpf * special_account_percent) / 100;
                        medisave_amount = (amount_to_calculate_cpf * medisave_account_percent) / 100;
                        employer_contribution_amount = (amount_to_calculate_cpf * employer_contribution_percent) / 100;
                        employee_contribution_amount = (amount_to_calculate_cpf * employee_contribution_percent) / 100;

                        var overTimeAllowance = 0;
                        var lopAmount = 0;

                        // lopAmount = lopDaysForEmployee * (result[index].basic_salary / totalNumberOfDaysPerMonth);
                        // lopAmount = Math.floor(lopAmount);

                        employeeOverTime = (data.overtime) ? parseInt(data.overtime / 60) : 0;
                        overTimeAllowance = (result[index].basic_salary / (totalNumberOfDaysPerMonth * 8)) * employeeOverTime;

                        result[index].cpf = ordinary_amount + special_amount + medisave_amount;
                        result[index].employee_contribution_amount = employee_contribution_amount;
                        result[index].employer_contribution_amount = employer_contribution_amount;
                        result[index].gross_salary = result[index].basic_salary + totalAllowanceAmount + result[index].bonus;

                        if (incometax_data.length > 0) {
                            let calculated = false;
                            incometax_data.forEach((taxdata) => {
                                if (taxdata.type == 1 && calculated == false) {
                                    if ((result[index].basic_salary * 12) <= taxdata.income_upto) {
                                        income_tax_amount = Math.ceil(taxdata.tax_amount / 12);
                                        calculated = true;
                                    }
                                } else if (calculated == false) {
                                    income_tax_amount = result[index].basic_salary * (taxdata.tax_amount / 100);
                                    income_tax_amount = Math.ceil(income_tax_amount);
                                    calculated = true;
                                }
                            });
                        }
                        
                        result[index].claims = 0;
                        result[index].lop = 0; 
                        result[index].income_tax_amount = income_tax_amount;
                        // result[index].net_salary = (result[index].gross_salary - result[index].employee_contribution_amount - lopAmount) + data.bonus + overTimeAllowance - income_tax_amount;
                        var netSalaryFinal = ( parseInt(result[index].gross_salary) + parseInt(overTimeAllowance)) - ( parseInt(employer_contribution_amount) + parseInt(result[index].employee_contribution_amount)  + parseInt(income_tax_amount)); //parseInt(lopAmount)
                        result[index].net_salary = (netSalaryFinal > 0) ? netSalaryFinal : 0; 
                        totalSalaryAmount = totalSalaryAmount + parseInt(result[index].gross_salary);
                        // console.log('Month and Year -------------->', monthtomonth + "-" + yeartoyear)
                        var monthyear = yeartoyear + "-" + monthtomonth;
                        cpfInsertQuery = cpfInsertQuery + " ('" + company_id + "','" + data.id + "','" + ordinary_amount + "','" + special_amount + "','" + medisave_amount + "','" + employer_contribution_amount + "','" + employee_contribution_amount + "','" + monthyear + "','" + income_tax_amount + "','" + result[index].net_salary + "','" + result[index].gross_salary + "','" + lopAmount + "','" + overTimeAllowance + "','" + lopDaysForEmployee + "','"+ payroll_id +"','"+ result[index].basic_salary +"','"+ result[index].salary +"','"+ result[index].bonus+"','"+ result[index].hra +"','"+ result[index].transport_allowance  +"','"+ result[index].food_allowance +"','"+ result[index].phone_allowance +"'),";
                    });

                    cpfInsertQuery = cpfInsertQuery.substring(0, cpfInsertQuery.length - 1);
                    if (isPreview == false && payrollGenerated == false) {
                        var cpfInsertResult = await commonFunction.executeQuery(cpfInsertQuery);
                        var updateTotalSalaryExpense = "UPDATE "+ tableConfig.HRM_PAYROLL_FOR_MONTH + " SET total_salary_amount = '"+ totalSalaryAmount +"' WHERE company_id = '"+ company_id +"' AND month = '"+ month +"' AND year = '"+ year +"' AND status = '1'";
                        var updatePayrollResult = await commonFunction.executeQueryAndRetunResults(updateTotalSalaryExpense);
                    }

                    


                    //Generate xl file
                    var month_year = yeartoyear+'-'+monthtomonth; 
                    var month_year_new = monthtomonth+'-'+yeartoyear;
                   
                    
                    var query = "SELECT um.company_id as company_id,um.emp_id as emp_ref_id,IFNULL(ed.firstname,'') as firstname,IFNULL(ed.middlename,'') as middlename,IFNULL(ed.lastname,'') as lastname,ed.basic_salary,es.*,IFNULL(ea.allowance,'') as allowances,cp.name as company_name,IFNULL(cp.logo,'') as company_logo FROM " + tableConfig.HRM_USER_MASTER + " um INNER JOIN " + tableConfig.HRM_EMPLOYEE_SALARY_DETAILS + " es ON es.emp_id = um.id AND es.month_year = '" + month_year + "' INNER JOIN " + tableConfig.HRM_EMPLOYEE_DETAILS + " ed ON ed.emp_id = es.emp_id LEFT JOIN " + tableConfig.HRM_EMPLOYEE_ALLOWANCES + " ea ON ea.emp_id = es.emp_id INNER JOIN " + tableConfig.HRM_COMP_PROFILE + " cp ON cp.id = um.company_id WHERE um.company_id ='" + company_id + "' AND um.status = '1'";
                    var payslipData = await commonFunction.getQueryResults(query);
                    // console.log('Month & Year', query )
                    var allowance_type_query = "SELECT * FROM " + tableConfig.HRM_ALLOWANCE_TYPES + " WHERE company_id = '" + company_id + "'";
                    var allowance_types = await commonFunction.getQueryResults(allowance_type_query);
            
                    var column_header = ["SNO", "Employee ID", "Employee Name", "Basic Pay"];
                    var column_header_end = ["Employer CPF", "Employee CPF", "Bonus", "Overtime", "Gross Salary", "Net Salary"];
            
                    var allowance_type_object = {};
                    if (allowance_types.length > 0) {
                        allowance_types.forEach(allowance => {
                            allowance_type_object[allowance.id] = allowance.allowance_name;
                            column_header.push(allowance.allowance_name);
                        });
                    }
                    column_header = column_header.concat(column_header_end);
            
                    var wb = XLSX.utils.book_new();
                    var ws_name = "Payroll Sheet";
                    var ws_data = [
                        column_header
                    ];
            
                    if (payslipData.length > 0) {
                        payslipData.forEach((employee, index) => {
                            var employeeName = employee.firstname + ' ' + employee.middlename + ' ' + employee.lastname;
                            var emp_ref_id = employee.emp_ref_id;
                            var basic_salary = employee.basic_salary;
                            var employer_contribution = employee.employer_contribution;
                            var employee_contribution = employee.employee_contribution;
                            var overtime_allowance = employee.overtime_allowance;
                            var gross_salary = employee.gross_salary;
                            var net_salary = employee.net_salary;
            
                            var bonus = 0;
                            var employeeData = [index + 1, emp_ref_id, employeeName, basic_salary];
            
                            try {
                                if (employee.allowances && employee.allowances.length > 0) {
            
                                    employee.allowances = phpunserialize(employee.allowances);
                                    bonus = (employee.allowances['bonus']) ? employee.allowances['bonus'] : 0;
            
                                    if (allowance_types.length > 0) {
                                        allowance_types.forEach(allowance => {
            
                                            if (employee.allowances[allowance.id] != undefined) {
                                                employeeData.push(employee.allowances[allowance.id]);
                                            } else {
                                                employeeData.push(0);
                                            }
                                        });
                                    }
                                } else {
                                    if (allowance_types.length > 0) {
                                        allowance_types.forEach(allowance => {
                                            employeeData.push(0);
                                        });
                                    }
                                }
                            } catch (ex) {
                                console.log('Parsing allowance object error...', ex);
                                if (allowance_types.length > 0) {
                                    allowance_types.forEach(allowance => {
                                        employeeData.push(0);
                                    });
                                }
                            }
                            employeeData = employeeData.concat([employer_contribution, employee_contribution, bonus, overtime_allowance, gross_salary, net_salary]);
                            ws_data.push(employeeData);
                        });
            
                        var ws = XLSX.utils.aoa_to_sheet(ws_data);
                        XLSX.utils.book_append_sheet(wb, ws, ws_name);
                        XLSX.writeFile(wb, './public/uploads/payroll-comp-' + company_id + '-' + month_year + '.xlsx');
            
                        // var filePath = ip.address() + ':' + commonConfig.SERVER_PORT + '/uploads/payroll-comp-' + company_id + '-' + month_year + '.xlsx';
                        var filePath = commonConfig.SERVER_URL_STATIC + ':' + commonConfig.SERVER_PORT + '/uploads/payroll-comp-' + company_id + '-' + month_year + '.xlsx';
             
                        var monthquery = "UPDATE " + tableConfig.HRM_PAYROLL_FOR_MONTH + " SET payroll_file_path = '"+filePath+"' WHERE year = '"+ yeartoyear +"' AND month = '"+ monthtomonth +"' ";
                    //    console.log("Monthtoyear query", monthquery)
                        sql.query(monthquery, function (err, approveResults) {
                            if (err) {
                                console.log(err);
                                deferred.resolve({ status: 0, message: "Failed to approve payroll" });
                            } else {
                               
                                deferred.resolve({ status: 1, message: "Employee payroll details", list: result, alreadyexist: alreadygenerated  });
                            }
                        }); 
            
                    } else {
                        deferred.resolve({ status: 0, message: "No data found to generate payslip" });
                    }
 
                } else {
                    deferred.resolve({ status: 0, message: "No Details found" });
                }
            }
            
        });
        return deferred.promise;
    },